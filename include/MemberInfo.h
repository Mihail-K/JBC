/**
 * @file MemberInfo.h
 * @author Mihail K
 * @date November, 2014
 * @version 0.40
 *
 * @brief Defines class member types and functions.
 **/
# ifndef __MEMBERINFO_H__
# define __MEMBERINFO_H__

# include <vector>
# include <stdint.h>

# include "ClassBuffer.h"
# include "ClassBuilder.h"

# include "ConstantInfo.h"

/**
 * @addtogroup MemberInfo
 * @{
 **/
namespace JBC {

// Forward Declarations.
class ClassFile;
struct AttributeInfo;

/* Access Flags */

/**
 * @enum MemberFalgs
 * @brief Various flags present of field and method member types.
 *
 * These values are used by the JVM to distinguish between various members
 * and assign properties such as access modifiers.
 **/
enum MemberFlags {
	FIELD_PUBLIC		= 0x0001,	/**< A field declared with public access.					*/
	FIELD_PRIVATE		= 0x0002,	/**< A field declared with private access.					*/
	FIELD_PROTECTED		= 0x0004,	/**< A field declared with protected access.				*/
	FIELD_STATIC		= 0x0008,	/**< A field declared to be static.							*/
	FIELD_FINAL			= 0x0010,	/**< Cannot be assigned to after object construction.		*/
	FIELD_VOLATILE		= 0x0040,	/**< A field that cannot be cached.							*/
	FIELD_TRANSIENT		= 0x0080,	/**< A field that's value is not persisted or serialized.	*/
	FIELD_SYNTHETIC		= 0x1000,	/**< A synthetic field not present in source code.			*/
	FIELD_ENUM			= 0x4000,	/**< A field which is an element in an enum.				*/

	METHOD_PUBLIC		= 0x0001,	/**< A method declared with public access.					*/
	METHOD_PRIVATE		= 0x0002,	/**< A method declared with private access.					*/
	METHOD_PROTECTED	= 0x0004,	/**< A method declared with protected access.				*/
	METHOD_STATIC		= 0x0008,	/**< A method declared to be static.						*/
	METHOD_FINAL		= 0x0010,	/**< A method that cannot be overriden.						*/
	METHOD_SYNCHRONIZED	= 0x0020,	/**< A method that's invocations are wrapped by a monitor.	*/
	METHOD_BRIDGE		= 0x0040,	/**< A bridge method generated by the compiler.				*/
	METHOD_VARARGS		= 0x0080,	/**< A method that is declared to take variable arguments.	*/
	METHOD_NATIVE		= 0x0100,	/**< A method implemented outside of Java.					*/
	METHOD_ABSTRACT		= 0x0400,	/**< An abstract method; implementation is not provided.	*/
	METHOD_STRICT		= 0x0800,	/**< A method in strict floating-point mode.				*/
	METHOD_SYNTHETIC	= 0x1000	/**< A syntheic method not present in source code.			*/
};

/* Field/Method Info */

/**
 * @class MemberInfo
 * @brief An object representation of Java class members,
 *			such as methods or fields.
 **/
class MemberInfo {
public:
	/**
	 * @brief Access permissions and property flags.
	 *
	 * A set of flags denoting various access permissions and properties
	 * for this class member.
	 **/
	uint16_t	access_flags;

	// Name
	/**
	 * @brief A constant value denoting the name of the member.
	 **/
	ConstantUtf8Info *name;

	// Descriptor
	/**
	 * @brief A constant value denoting the method descriptor.
	 **/
	ConstantUtf8Info *descriptor;

	// Attributes Table
	/**
	 * @brief A table of attributes associated with this member.
	 **/
	std::vector<AttributeInfo *> attributes;

public:
	/**
	 * @brief Constructor for MemverInfo.
	 **/
	MemberInfo();
	/**
	 * @brief Destructor for MemberInfo.
	 **/
	~MemberInfo();

public:
	/**
	 * @brief Returns a reference to this member's flags.
	 **/
	inline
	uint16_t &Flags() {
		return access_flags;
	}

	/**
	 * @brief Returns the state of a single flag.
	 *
	 * @param flag The flag to check for.
	 **/
	bool GetFlag(MemberFlags flag) {
		return !!(access_flags & flag);
	}

	/**
	 * @brief Sets the state of a single flag.
	 *
	 * @param flag The flag to be modified.
	 * @param state The new state for the flag.
	 **/
	void SetFlag(MemberFlags flag, bool state) {
		if(state) access_flags |= flag;
		else access_flags &= ~flag;
	}

	/**
	 * @brief Returns this member's name.
	 *
	 * @return The name of this member.
	 **/
	std::string Name() {
		if(name == NULL) return NULL;
		return reinterpret_cast<char *>(name->bytes);
	}

	/**
	 * @brief Returns this member's descriptor descriptor.
	 *
	 * @return The descriptor for this member.
	 **/
	std::string Descriptor() {
		if(descriptor == NULL) return NULL;
		return reinterpret_cast<char *>(descriptor->bytes);
	}

public:
	/**
	 * @brief Checks if this member is public.
	 *
	 * Corresponds to the @c public keyword.
	 **/
	inline
	bool IsPublic() {
		return GetFlag(FIELD_PUBLIC);
	}

	/**
	 * @brief Checks if this member is protected.
	 *
	 * Corresponds to the @c protected keyword.
	 **/
	inline
	bool IsProtected() {
		return GetFlag(FIELD_PROTECTED);
	}

	/**
	 * @brief Checks if this member is private.
	 *
	 * Corresponds to the @c private keyword.
	 **/
	inline
	bool IsPrivate() {
		return GetFlag(FIELD_PRIVATE);
	}

	/**
	 * @brief Checks if this member is package private (default).
	 *
	 * Corresponds to declarations with no access modifier specified.
	 **/
	inline
	bool IsPackagePrivate() {
		return !IsPublic() && !IsProtected()
				&& !IsPrivate();
	}

	/**
	 * @brief Checks if this member is static.
	 *
	 * Corresponds to the @c static keyword.
	 **/
	inline
	bool IsStatic() {
		return GetFlag(FIELD_STATIC);
	}

	/**
	 * @brief Checks if this member is final.
	 *
	 * Corresponds to the @c final keyword.
	 **/
	inline
	bool IsFinal() {
		return GetFlag(FIELD_FINAL);
	}

	/**
	 * @brief Checks if this member is volatile.
	 *
	 * Corresponds to the @c volatile keyword.
	 * This property is only meaningful for fields.
	 **/
	inline
	bool IsVolatile() {
		return GetFlag(FIELD_VOLATILE);
	}

	/**
	 * @brief Checks if this member is transient.
	 *
	 * Corresponds to the @c transient keyword.
	 * This property is only meaningful for fields.
	 **/
	inline
	bool IsTransient() {
		return GetFlag(FIELD_TRANSIENT);
	}

	/**
	 * @brief Checks if this member is synthetic.
	 *
	 * Synthetic members are ones that do not appear in source code.
	 **/
	inline
	bool IsSynthetic() {
		return GetFlag(FIELD_SYNTHETIC);
	}


	/**
	 * @brief Checks if this member is an enum constant.
	 *
	 * This property is only meaningful for fields.
	 **/
	inline
	bool IsEnumConstant() {
		return GetFlag(FIELD_ENUM);
	}

	/**
	 * @brief Checks if this member is synchronized.
	 *
	 * Corresponds to the @c synchronized keyword.
	 * This property is only meaningful for methods.
	 **/
	inline
	bool IsSynchronized() {
		return GetFlag(METHOD_SYNCHRONIZED);
	}
	
	/**
	 * @brief Checks if this member is a bridge.
	 *
	 * Bridge methods are generated by the compiler.
	 * This property is only meaningful for methods.
	 **/
	inline
	bool IsBridge() {
		return GetFlag(METHOD_BRIDGE);
	}

	/**
	 * @brief Checks if this member takes variable arguments.
	 *
	 * Corresponds to methods declared with variable arguments.
	 * This property is only meaningful for methods.
	 **/
	inline
	bool IsVarArgs() {
		return GetFlag(METHOD_VARARGS);
	}

	/**
	 * @brief Checks if this member is native.
	 *
	 * Corresponds to the @c native keyword.
	 * This property is only meaningful for methods.
	 **/
	inline
	bool IsNative() {
		return GetFlag(METHOD_NATIVE);
	}

	/**
	 * @brief Checks if this member is abstract.
	 *
	 * Corresponds to the @c abstract keyword.
	 * This property is only meaningful for methods.
	 **/
	inline
	bool IsAbstract() {
		return GetFlag(METHOD_ABSTRACT);
	}

	/**
	 * @brief Checks if this member is in strict floating-point mode.
	 *
	 * Corresponds to the @c strictfp keyword.
	 * This property is only meaningful for methods.
	 **/
	inline
	bool IsStrict() {
		return GetFlag(METHOD_STRICT);
	}

public:
	MemberInfo *DecodeMember(ClassBuffer *buffer, ClassFile *classFile);
	MemberInfo *EncodeMember(ClassBuilder *builder, ClassFile *classFile);
};

} /* JBC */

/**
 * }@
 **/

# endif /* MemberInfo.h */
